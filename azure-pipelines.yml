variables:
  - template: eng/common-variables.yml
  - name: Build.Repository.Clean
    value: true
  - name: _HelixType
    value: build/product
  - name: _HelixSource
    value: pr/dotnet/xharness/$(Build.SourceBranch)
  - name: _HelixTestType
    value: test/product/
  - name: _XUnitProject
    value: $(Build.SourcesDirectory)/tests/XHarness.Tests/XHarness.Tests.csproj
  - name: _XUnitTargetFramework
    value: netcoreapp3.1
  - name: _XUnitRunnerVersion
    value: 2.4.1
  - name: _DotNetCliPackageType
    value: sdk
  - name: _DotNetCliVersion
    value: 3.1.101
  - name: _HelixAccessToken
    value: ''

# CI and PR triggers
trigger:
  batch: true
  branches:
    include:
    - master

pr:
  branches:
    include:
    - master

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableTelemetry: true
      enablePublishBuildArtifacts: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      enablePublishBuildAssets: true
      helixRepo: dotnet/xharness

      jobs:
    #   - job: Windows_NT
    #     pool:
    #       ${{ if eq(variables._RunAsInternal, True) }}:
    #         name: NetCoreInternal-Pool
    #         queue: BuildPool.Server.Amd64.VS2019
    #       ${{ if eq(variables._RunAsPublic, True) }}:
    #         name: NetCorePublic-Pool
    #         queue: BuildPool.Server.Amd64.VS2019.Open
    #     strategy:
    #       matrix:
    #         Release:
    #           _BuildConfig: Release
    #         ${{ if eq(variables._RunAsPublic, True) }}:
    #           Debug:
    #             _BuildConfig: Debug
    #     steps:
    #     - script: eng\common\cibuild.cmd
    #         -configuration $(_BuildConfig)
    #         -prepareMachine
    #         $(_InternalBuildArgs)
    #       name: Build
    #       displayName: Build
    #       condition: succeeded()

    #     - task: PublishTestResults@2
    #       displayName: 'Publish Unit Test Results'
    #       inputs:
    #         testResultsFormat: xUnit
    #         testResultsFiles: '$(Build.SourcesDirectory)/artifacts/TestResults/**/*.xml'
    #         mergeTestResults: true
    #         searchFolder: $(system.defaultworkingdirectory)
    #         testRunTitle: XHarness unit tests - $(Agent.JobName)
    #       condition: succeededOrFailed()

    #     - task: PublishBuildArtifacts@1
    #       displayName: Publish Logs to VSTS
    #       inputs:
    #         PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
    #         PublishLocation: Container
    #         ArtifactName: $(Agent.Os)_$(Agent.JobName)
    #       continueOnError: true
    #       condition: always()
- stage: test
  displayName: Run integration tests
  dependsOn: build
  jobs:
  - job: Integration tests
    pool:
        name: Hosted macOS
    steps:
    - bash: "echo 'Hello world'"
      name: HelloWorld
      displayName: HelloWorld
      condition: succeeded()
